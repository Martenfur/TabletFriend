<Application x:Class="TabletFriend.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:TabletFriend"
             StartupUri="MainWindow.xaml">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
				<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<!--PRIMARY-->
			<Style x:Key="toggle" 
				   TargetType="{x:Type ToggleButton}" 
				   BasedOn="{StaticResource MaterialDesignFlatPrimaryToggleButton}">
				<Setter Property="Foreground" Value="{DynamicResource MaterialDesignFont}" /> 
				<Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" /> 
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Grid ClipToBounds="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal"/>
										<VisualState x:Name="Disabled">
											<Storyboard>
												<DoubleAnimation Duration="0" To="0.38" Storyboard.TargetProperty="(UIElement.Opacity)" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
									<VisualStateGroup x:Name="CheckStates">
										<VisualStateGroup.Transitions>
											<VisualTransition From="*" To="Checked">
												<Storyboard>
													<DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
														<LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
														<LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
													</DoubleAnimationUsingKeyFrames>
													<DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
														<LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
														<LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
													</DoubleAnimationUsingKeyFrames>
												</Storyboard>
											</VisualTransition>
											<VisualTransition From="Checked" To="Unchecked">
												<Storyboard>
													<DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
														<LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
														<LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
													</DoubleAnimationUsingKeyFrames>
													<DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
														<LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
														<LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
													</DoubleAnimationUsingKeyFrames>
												</Storyboard>
											</VisualTransition>
										</VisualStateGroup.Transitions>
										<VisualState x:Name="Checked">
											<Storyboard>
												<DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
												<DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Unchecked">
											<Storyboard>
												<DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="0" />
												<DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="0" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<Border Background="Transparent" BorderBrush="Transparent" x:Name="HoverEllipse" BorderThickness="1" CornerRadius="8" Opacity="0.3"/>
								<Border Background="{TemplateBinding Background}" x:Name="CheckedEllipse" RenderTransformOrigin="0.5, 0.5" CornerRadius="8">
									<Border.RenderTransform>
										<ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
									</Border.RenderTransform>
								</Border>
								<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="HoverEllipse" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="default" 
				   TargetType="{x:Type ButtonBase}" 
				   BasedOn="{StaticResource MaterialDesignFlatButton}">
				<Setter Property="Padding" Value="0 0 0 0"/>
			</Style>
			<Style x:Key="accent" 
				   TargetType="{x:Type ButtonBase}" 
				   BasedOn="{StaticResource MaterialDesignRaisedAccentButton}">
				<Setter Property="Padding" Value="0 0 0 0"/>
			</Style>
			<Style x:Key="circular_accent" 
				   TargetType="{x:Type ButtonBase}" 
				   BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
				<Setter Property="Padding" Value="0 0 0 0"/>
			</Style>
			<Style x:Key="outlined" 
				   TargetType="{x:Type ButtonBase}" 
				   BasedOn="{StaticResource MaterialDesignOutlinedButton}">
				<Setter Property="Padding" Value="0 0 0 0"/>
			</Style>
			<Style x:Key="circular" 
				   TargetType="{x:Type ButtonBase}" 
				   BasedOn="{StaticResource MaterialDesignIconButton}">
				<Setter Property="Padding" Value="0 0 0 0"/>
			</Style>
			<Style x:Key="shy" 
				   TargetType="{x:Type ButtonBase}" 
				   BasedOn="{StaticResource MaterialDesignToolButton}">
				<Setter Property="Padding" Value="0 0 0 0"/>
			</Style>
			<Style TargetType="{x:Type ToolTip}" x:Key="tool_tip" BasedOn="{StaticResource MaterialDesignToolTip}">
				<Setter Property="Foreground" Value="{DynamicResource MaterialDesignFont}" />
				<Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
			</Style>

		</ResourceDictionary>

	</Application.Resources>
</Application>
